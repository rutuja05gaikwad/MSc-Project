import boto3
import zipfile
import os
from botocore.exceptions import ClientError

def create_lambda_function():
    lambda_client = boto3.client('lambda')

    lambda_code = '''
import json
import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    ssm_client = boto3.client('ssm')
    
    s3_bucket = event['Records'][0]['s3']['bucket']['name']
    s3_key = event['Records'][0]['s3']['object']['key']

    command = f'/home/ubuntu/scan_and_clean.sh {s3_bucket} {s3_key}'

    logger.info(f"Command to be sent: {command}")

    response = ssm_client.send_command(
        InstanceIds=['i-00d70d6b4285473f6'],
        DocumentName="AWS-RunShellScript",
        Parameters={'commands': [command]},
        TimeoutSeconds=60
    )

    command_id = response['Command']['CommandId']
    logger.info(f"SSM Command ID: {command_id}")

    return {'statusCode': 200, 'body': json.dumps('Command sent to EC2')}
'''

    # Write Lambda function code to a file
    with open("lambda_function.py", "w") as f:
        f.write(lambda_code)

    # Create a ZIP file containing the Lambda function code
    zip_file_name = "lambda_function.zip"
    with zipfile.ZipFile(zip_file_name, 'w') as z:
        z.write("lambda_function.py")

    # Read the ZIP file contents
    with open(zip_file_name, 'rb') as f:
        zipped_code = f.read()

    function_name = 'clamavlambda'

    try:
        # Check if the Lambda function already exists
        response = lambda_client.get_function(FunctionName=function_name)
        function_arn = response['Configuration']['FunctionArn']
        print(f"Lambda function '{function_name}' already exists with ARN: {function_arn}. No need to deploy.")
        return function_arn  # Return the existing function ARN

    except lambda_client.exceptions.ResourceNotFoundException:
        # If the function does not exist, create it
        try:
            response = lambda_client.create_function(
                FunctionName=function_name,
                Runtime='python3.8',
                Role='arn:aws:iam::584676863528:role/lambda_execution_role_clamav',
                Handler='lambda_function.lambda_handler',
                Code={'ZipFile': zipped_code},
                Description='Lambda function for running ClamAV scan on an S3 object',
                Timeout=15,
                MemorySize=128,
            )
            function_arn = response['FunctionArn']
            print(f"Lambda function created with ARN: {function_arn}")
            return function_arn

        except ClientError as e:
            print(f"Failed to create Lambda function: {e}")
            raise e
    except ClientError as e:
        print(f"An error occurred while checking for Lambda function: {e}")
        raise e
