import boto3
import json

def create_lambda_execution_role():
    iam_client = boto3.client('iam')
    
    role_name = 'lambda_execution_role_clamav'
    policy_name = 'LambdaExecutionPolicy'
    
    assume_role_policy_document = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": {
                    "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
            }
        ]
    }
    
    try:
        role_response = iam_client.create_role(
            RoleName=role_name,
            AssumeRolePolicyDocument=json.dumps(assume_role_policy_document),
            Description='Role for Lambda function to run ClamAV scan and send commands to EC2'
        )
        role_arn = role_response['Role']['Arn']
        print(f"Created role with ARN: {role_arn}")
        
        iam_client.attach_role_policy(
            RoleName=role_name,
            PolicyArn='arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        )
        print(f"Attached AWSLambdaBasicExecutionRole policy to {role_name}")
        
        iam_client.attach_role_policy(
            RoleName=role_name,
            PolicyArn='arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        )
        print(f"Attached AmazonS3ReadOnlyAccess policy to {role_name}")
        
        iam_client.attach_role_policy(
            RoleName=role_name,
            PolicyArn='arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        )
        print(f"Attached AmazonSSMFullAccess policy to {role_name}")
        
        pass_role_policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "iam:PassRole",
                    "Resource": f"arn:aws:iam::584676863528:role/{role_name}"  # Replace with actual account ID
                }
            ]
        }
        
        iam_client.put_role_policy(
            RoleName=role_name,
            PolicyName=policy_name,
            PolicyDocument=json.dumps(pass_role_policy_document)
        )
        print(f"Attached custom IAM PassRole policy to {role_name}")

    except iam_client.exceptions.EntityAlreadyExistsException:
        print(f"Role '{role_name}' already exists.")
        role_response = iam_client.get_role(RoleName=role_name)
        role_arn = role_response['Role']['Arn']
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

    return role_arn


def create_instance_profile(instance_profile_name, role_name):
    iam_client = boto3.client('iam')

    try:
        # Create the instance profile
        iam_client.create_instance_profile(
            InstanceProfileName=instance_profile_name
        )
        print(f"Instance profile '{instance_profile_name}' created.")

        # Add the role to the instance profile
        iam_client.add_role_to_instance_profile(
            InstanceProfileName=instance_profile_name,
            RoleName=role_name
        )
        print(f"Role '{role_name}' added to instance profile '{instance_profile_name}'.")

        # Get the instance profile ARN
        response = iam_client.get_instance_profile(
            InstanceProfileName=instance_profile_name
        )
        instance_profile_arn = response['InstanceProfile']['Arn']
        return instance_profile_arn

    except iam_client.exceptions.EntityAlreadyExistsException:
        print(f"Instance profile '{instance_profile_name}' already exists.")
        # Get the instance profile ARN if it already exists
        response = iam_client.get_instance_profile(
            InstanceProfileName=instance_profile_name
        )
        instance_profile_arn = response['InstanceProfile']['Arn']
        return instance_profile_arn
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
