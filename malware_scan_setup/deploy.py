import json
from malware_scan_setup import iam_setup, lambda_setup, ec2_setup, sns_setup, s3_setup
import sys
import boto3
from botocore.exceptions import ClientError

import boto3
from botocore.exceptions import ClientError

def add_lambda_permission(lambda_arn, bucket_name):
    lambda_client = boto3.client('lambda')
    statement_id = 'S3InvokeLambda'
    
    try:
        # Get the current policy for the Lambda function
        policy_response = lambda_client.get_policy(FunctionName=lambda_arn)
        policy = policy_response['Policy']
        policy_statements = json.loads(policy).get('Statement', [])

        # Check if the statement already exists
        for statement in policy_statements:
            if statement.get('Sid') == statement_id:
                print(f"Permission with statement id '{statement_id}' already exists. Skipping permission addition.")
                return  # Exit the function as permission already exists

    except ClientError as e:
        if e.response['Error']['Code'] == 'ResourceNotFoundException':
            print("No existing policy found, proceeding to add permission.")
        else:
            print(f"An error occurred while retrieving Lambda policy: {e}")
            return

    # If the statement does not exist, add the permission
    try:
        response = lambda_client.add_permission(
            FunctionName=lambda_arn,
            StatementId=statement_id,
            Action='lambda:InvokeFunction',
            Principal='s3.amazonaws.com',
            SourceArn=f'arn:aws:s3:::{bucket_name}',
            SourceAccount='1234567890'  # Your AWS account ID
        )
        print("Lambda permission added successfully.")
    except ClientError as e:
        print(f"An error occurred while adding permission to Lambda: {e}")



def main():
    print("Starting deployment...")
    try:
        # IAM setup
        role_arn = iam_setup.create_lambda_execution_role()
        print(f"IAM Role created with ARN: {role_arn}")

        # Create an instance profile and add the IAM role to it
        instance_profile_name = 'lambda_execution_instance_profile_clamav'
        role_name = 'lambda_execution_role_clamav'
        instance_profile_arn = iam_setup.create_instance_profile(instance_profile_name, role_name)  # Call the function with two arguments
        print(f"Instance Profile created with ARN: {instance_profile_arn}")

        # S3 setup
        bucket_name = 'securefileclamav'  # Your bucket name
        region = 'us-west-1'  # Your desired region

        try:
            s3_setup.create_s3_bucket(bucket_name=bucket_name, region=region)
            print(f"S3 bucket '{bucket_name}' created in region '{region}'")
        except ClientError as e:
            if e.response['Error']['Code'] == 'BucketAlreadyExists':
                print(f"Bucket '{bucket_name}' already exists.")
            elif e.response['Error']['Code'] == '403':
                print(f"Access to bucket '{bucket_name}' is forbidden. Please check bucket policies and IAM permissions.")
            else:
                print(f"An error occurred while creating or accessing the S3 bucket: {e}")
            sys.exit(1)

        # Lambda setup
        lambda_arn = lambda_setup.create_lambda_function()
        print(f"Lambda function created with ARN: {lambda_arn}")

        # Add permission to Lambda for S3 invocation
        add_lambda_permission(lambda_arn=lambda_arn, bucket_name=bucket_name)

        # Configure S3 event notification
        s3_setup.configure_s3_event_notification(bucket_name=bucket_name, lambda_arn=lambda_arn)

        # EC2 setup
        ec2_instance_id = ec2_setup.create_ec2_instance(instance_profile_arn=instance_profile_arn)
        print(f"EC2 instance created with Instance ID: {ec2_instance_id}")

        # SNS setup
        sns_topic_arn = sns_setup.setup_sns_topic()
        print(f"SNS topic created with ARN: {sns_topic_arn}")

        sns_setup.subscribe_to_sns_topic(sns_topic_arn, 'email', 'test@gmail.com')
        print(f"Subscribed to SNS topic '{sns_topic_arn}' with email 'test@gmail.com'")

        print("Deployment completed successfully.")
    
    except Exception as e:
        print(f"An error occurred during deployment: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
