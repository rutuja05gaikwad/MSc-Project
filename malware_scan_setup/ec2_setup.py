import boto3
import time
from botocore.exceptions import ClientError
import os

def create_instance_profile(role_name):
    iam_client = boto3.client('iam')
    instance_profile_name = f'{role_name}_InstanceProfile'

    try:
        # Check if the instance profile already exists
        iam_client.get_instance_profile(InstanceProfileName=instance_profile_name)
        print(f"Instance profile {instance_profile_name} already exists.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchEntity':
            print(f"Instance profile {instance_profile_name} does not exist. Creating a new instance profile.")
            # Create the instance profile
            iam_client.create_instance_profile(InstanceProfileName=instance_profile_name)

            # Add the role to the instance profile
            iam_client.add_role_to_instance_profile(
                InstanceProfileName=instance_profile_name,
                RoleName=role_name
            )
            print(f"Created instance profile with name: {instance_profile_name}")
        else:
            print(f"Unexpected error: {e}")
            raise

    return f'arn:aws:iam::{os.getenv("AWS_ACCOUNT_ID")}:instance-profile/{instance_profile_name}'  # Use environment variable for account ID

def create_ec2_instance(instance_profile_arn):
    ec2_client = boto3.client('ec2')

    user_data_script = '''#!/bin/bash
    # Update the package list and install necessary packages
    apt-get update -y
    apt-get upgrade -y

    # Install AWS CLI
    apt-get install -y awscli

    # Install ClamAV
    apt-get install -y clamav clamav-daemon

    # Update the ClamAV database
    freshclam

    # Enable ClamAV on boot and start the service
    systemctl enable clamav-daemon
    systemctl start clamav-daemon

    # Verify the status of the ClamAV daemon
    systemctl status clamav-daemon >> /home/ubuntu/clamav_status.log

    # Print the version to verify installation
    clamscan --version

    # Create the scan_and_clean.sh script
    sudo tee /home/ubuntu/scan_and_clean.sh > /dev/null << 'EOF'
    #!/bin/bash
    LOGFILE="/home/ubuntu/scan_and_clean.log"
    S3_BUCKET=$1
    S3_KEY=$2
    SNS_TOPIC_ARN="arn:aws:sns:us-west-1:1234567890:InfectedFileAlerts"  # Replace with your SNS topic ARN
    AWS_REGION="us-west-1"

    echo "$(date): Script started" >> $LOGFILE

    # Download the file from S3
    echo "$(date): Attempting to download $S3_KEY from bucket $S3_BUCKET" >> $LOGFILE
    aws s3 cp s3://$S3_BUCKET/$S3_KEY /tmp/$S3_KEY >> $LOGFILE 2>&1
    if [ $? -ne 0 ]; then
        echo "$(date): Failed to download $S3_KEY from S3" >> $LOGFILE
        exit 1
    fi

    # Scan the file using clamdscan
    echo "$(date): Scanning file $S3_KEY" >> $LOGFILE
    clamdscan --remove=yes /tmp/$S3_KEY >> $LOGFILE 2>&1
    if [ $? -eq 0 ]; then
        echo "$(date): Scan complete. No threats found in $S3_KEY" >> $LOGFILE
    else
        echo "$(date): Scan complete. Malware detected in $S3_KEY and file removed locally" >> $LOGFILE

        # Delete the infected file from S3
        echo "$(date): Deleting infected file $S3_KEY from S3 bucket $S3_BUCKET" >> $LOGFILE
        aws s3 rm s3://$S3_BUCKET/$S3_KEY >> $LOGFILE 2>&1
        if [ $? -eq 0 ]; then
            echo "$(date): Successfully deleted $S3_KEY from S3 bucket $S3_BUCKET" >> $LOGFILE
        else
            echo "$(date): Failed to delete $S3_KEY from S3 bucket $S3_BUCKET" >> $LOGFILE
        fi
        # Send SNS notification
        echo "$(date): Attempting to publish to SNS" >> $LOGFILE
        PUBLISH_RESULT=$(aws sns publish --region "$AWS_REGION" --topic-arn "$SNS_TOPIC_ARN" --message "Malware detected in file $S3_KEY in bucket $S3_BUCKET. The file was deleted.")
        echo "$(date): SNS publish result: $PUBLISH_RESULT" >> $LOGFILE

    fi

    echo "$(date): Script completed" >> $LOGFILE
    EOF

    # Make the script executable
    chmod +x /home/ubuntu/scan_and_clean.sh
    '''

    # Adding a sleep to wait for the instance profile to propagate
    time.sleep(15)

    response = ec2_client.run_instances(
        ImageId='ami-1234567890',  # Example: Ubuntu 20.04 LTS (you might need to choose a region-specific AMI ID)
        InstanceType='t2.medium',           # Instance type
        KeyName='newkeypairclamav',      # Replace with your key pair name
        MinCount=1,
        MaxCount=1,
        SecurityGroupIds=['sg-1234567890'],  # Replace with your security group ID
        SubnetId='subnet-1234567890',        # Replace with your subnet ID
        UserData=user_data_script,
        IamInstanceProfile={'Arn': instance_profile_arn},  # Use ARN instead of Name
        TagSpecifications=[
            {
                'ResourceType': 'instance',
                'Tags': [
                    {'Key': 'Name', 'Value': 'newclamav'},  # Replace with your desired instance name
                ]
            },
        ]
    )

    instance_id = response['Instances'][0]['InstanceId']
    print(f"EC2 Instance created with ID: {instance_id} and Name: newclamav")

if __name__ == "__main__":
    role_name = 'SSMManagedInstanceRole'  # Replace with your role name
    instance_profile_arn = create_instance_profile(role_name)
    create_ec2_instance(instance_profile_arn)
